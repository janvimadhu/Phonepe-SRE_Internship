TASK-1

Setup MariaDB
S1:
sudo apt update && sudo apt upgrade
sudo apt -y install software-properties-common

S2: Import MariaDB gpg key:-
sudo apt-key adv --fetch-keys 'https://mariadb.org/mariadb_release_signing_key.asc'

S3: Add MariaDB APT repository
sudo add-apt-repository 'deb [arch=amd64,arm64,ppc64el] http://archive.mariadb.org/mariadb-10.5.6/repo/ubuntu/ focal main'

S4: Install MariaDB Server
sudo apt update
sudo apt install mariadb-server mariadb-client

S5: Secure MariaDB Server
sudo mysql_secure_installation

systemctl status mysql //status check
SELECT VERSION(); //check version of MariaDB

https://computingforgeeks.com/how-to-install-mariadb-on-ubuntu-focal-fossa/
follow this link and replace step 3 with the below command
sudo add-apt-repository 'deb [arch=amd64,arm64,ppc64el] http://archive.mariadb.org/mariadb-10.5.6/repo/ubuntu/ focal main'

Login using : mysql -u root -p
Create users
Create DATABASE db_name;
To restore dump file: mysql -u root -p db_name < dumpfile.sql
Use dbname;
Select * from tablename. LIMIT 5;

-------------------------------------------------
TASK-2

MASTER_SLAVE Process

firewall-cmd --permanent --add-port=3306/tcp; firewall-cmd --reload

Master1
S1: Edit conf file and enter the below statements under [mysqld]:
nano /etc/mysql/mariadb.conf.d/50-server.cnf
bind-address            = 172.10.0.1

add the following lines at the end of the file:
server-id = 1
log_bin = /var/log/mysql/mysql-bin.log
log_bin_index =/var/log/mysql/mysql-bin.log.index
relay_log = /var/log/mysql/mysql-relay-bin
relay_log_index = /var/log/mysql/mysql-relay-bin.index

systemctl restart mariadb
mysql -u root -p

CREATE USER 'replication'@'%' identified by 'your-password';
GRANT REPLICATION SLAVE ON *.* TO 'replication'@'%';
FLUSH PRIVILEGES;
show master status;

Copy or make note of the Master status - file name and Position

Exit;
 
SLAVE1
nano /etc/mysql/mariadb.conf.d/50-server.cnf
bind-address            = 172.10.0.2

add the following lines at the end of the file:
server-id = 2
log_bin = /var/log/mysql/mysql-bin.log
log_bin_index =/var/log/mysql/mysql-bin.log.index
relay_log = /var/log/mysql/mysql-relay-bin
relay_log_index = /var/log/mysql/mysql-relay-bin.index

systemctl restart mariadb
mysql -u root -p

Stop slave;
CHANGE MASTER TO MASTER_HOST = '172.10.0.1', MASTER_USER = 'repl', MASTER_PASSWORD = 'your-password', MASTER_LOG_FILE = 'mysql-bin.000001', MASTER_LOG_POS = 313;
start slave;
SHOW SLAVE STATUS \G
Exit;

Links:-
https://www.youtube.com/watch?v=yfYq4_a_juU&t=4s
https://www.atlantic.net/vps-hosting/how-to-setup-mariadb-master-slave-replication-on-ubuntu-18-04/?__cf_chl_jschl_tk__=fb9a1bbae4ddde607399c8e3ee4725f41b66a549-1616585150-0-AaY_zC5GTqNn1kAypsQYIaNZirCjsV-CJwKPaQicMkUBSAu_qeeW_BNiieyB60GequD0oCIQLj7UXlVyEmbgx9mavuM2lP8jRMB2Z8JfKhDq6UjeIz41BFrXwpBfEzZu9aKKUBAOnVGr9mCI6xaaR32aIt7MMx8IGl0Rx_SiuJMY4pqSihu0E34XJEnYuApRooOikZlnGQMM0YvEh_v2zR1yMxfjmr9u_WpIB_ujENfGIMAglHRW5KNuDi3beD9su0vQTpcUd5x39ql67Ck1SHMwIyJtWlBxYHS-YOrlB8prS3JmeQQXy5rS97lB-aBzRZczcVwaiMfzOtO0q0FPogiJbuex5J6jrvc4XVUCE3NTpdAlET8oqrqclXoJVbLFm5TQVexsnjMbMDfeOWVpEM6igIy85UtQF20gm7aEYhXM
-------------------------------------------------
TASK-3

MASTER_MASTER Process

In the above progress, just create the repl user in the SLAVE1 and grant slave replication permission

SLAVE1
mysql -u root -p

CREATE USER 'replication'@'%' identified by 'your-password';
GRANT REPLICATION SLAVE ON *.* TO 'replication'@'%';
FLUSH PRIVILEGES;
show master status;

Copy or make note of the Master status - file name and Position

Exit;

This time change Master to master settings in Master1, 
so the Master1 ->(slave) SLAVE1 & SLAVE1 ->(slave) MASTER1. => MASTER1 <=> MASTER2

MASTER1
mysql -u root -p

Stop slave;
CHANGE MASTER TO MASTER_HOST = '172.10.0.2', MASTER_USER = 'repl', MASTER_PASSWORD = 'your-password', MASTER_LOG_FILE = 'mysql-bin.000002', MASTER_LOG_POS = 793;
start slave;
SHOW SLAVE STATUS \G
Exit;

Links:-
http://woshub.com/configure-mariadb-replication/#h2_2
-------------------------------------------------
TASK-4

Galera
Convert this setup into two nodes Galera clusters and then add another node to this cluster.
Maintain everything in a single network with /24 mask and connect to it and check ping with bgp so Galera can access the router ip and can connect to Galera cluster as required.

sudo apt-get install rsync

Configuring the First Node
nano /etc/mysql/conf.d/galera.cnf (or) /etc/mysql/mariadb.conf.d/60-galera.cnf

galera.cnf file:-
+++++++++++++++++++++++++++++++++

[mysqld]
binlog_format=ROW
default-storage-engine=innodb
innodb_autoinc_lock_mode=2
bind-address=0.0.0.0

# Galera Provider Configuration
wsrep_on=ON
wsrep_provider=/usr/lib/galera/libgalera_smm.so

# Galera Cluster Configuration
wsrep_cluster_name="test_cluster"
wsrep_cluster_address="gcomm://first_ip,second_ip,third_ip"

# Galera Synchronization Configuration
wsrep_sst_method=rsync

# Galera Node Configuration
wsrep_node_address="this_node_ip"
wsrep_node_name="this_node_name"

+++++++++++++++++++++++++++++++++

Configuring the Remaining Nodes
 Same config but change the ip and name in last 2 lines.
# Galera Node Configuration
wsrep_node_address="this_node_ip"
wsrep_node_name="this_node_name"

Opening the Firewall on Every Server
sudo ufw allow 3306,4567,4568,4444/tcp
sudo ufw allow 4567/udp

Starting the Cluster
Stop MariaDB on all Three Servers
sudo systemctl stop mysql
sudo systemctl status mysql

Bring up First Node
sudo galera_new_cluster
mysql -u root -p -e "SHOW STATUS LIKE 'wsrep_cluster_size'"

Bring up Second Node
sudo systemctl start mysql

Check size in first node to see if the size increased to 2 using the command

Bring up Third Node
sudo systemctl start mysql

All nodes get in sync.

Links:-
https://www.digitalocean.com/community/tutorials/how-to-configure-a-galera-cluster-with-mariadb-10-1-on-ubuntu-16-04-servers

Additions commands to check:-
Use mysql;
Show tables;
Select * from wrep_cluster_members;
Checksum table table_name;
Show like status '%stat%';

-------------------------------------------------
TASK-5.1

Physical Backup and setup Docker on it and compare the checksum of the table.
mariabackup --backup  --galera-info \
   --target-dir=$MYSQL_BACKUP_DIR \
   --user=$DB_USER \
   --password=$DB_USER_PASS

Links:-
https://mariadb.com/kb/en/manual-sst-of-galera-cluster-node-with-mariabackup/  (MANUAL-VERSION)

Additional:-
https://mariadb.com/kb/en/introduction-to-state-snapshot-transfers-ssts/
-------------------------------------------------
TASK-5.2

Upgrade the Galera cluster from 10.5.6 to 10.5.9. (Minor Release)


Links:-
https://mariadb.com/kb/en/upgrading-between-minor-versions-with-galera-cluster/    (minor)
https://mariadb.com/kb/en/upgrading-from-mariadb-103-to-mariadb-104-with-galera-cluster/   (major)
-------------------------------------------------
TASK-6

Queries for the stats


## MariaDB Queries to provide the stats

1.  summary for the day/week/month:

    1.  highest requested host
        ```sql
        select host, count(host) as times FROM ngnix_access_log group by host order by times desc limit 1;
        / - or - /
        select max(host) as host, count(host) as times from ngnix_access_log group by host order by times desc limit 1;
        ```

    2.  highest requested upstream_ip
        ```sql
        select LEFT(upstream_ip_port,LOCATE(':',upstream_ip_port)-1) as upstream_ip , count(LEFT(upstream_ip_port,LOCATE(':',upstream_ip_port)-1)) as times from ngnix_access_log group by upstream_ip order by times desc limit 1;
        ```

    3.  highest requested path (upto 2 subdirectories ex: /check/balance)
        ```sql
        select LEFT(path,LOCATE('/',path, 2)+LOCATE('/',path, 3)-1) as pathh , count(LEFT(path,LOCATE('/',path, 2)+LOCATE('/',path, 3)-1)) as times from ngnix_access_log group by pathh order by times desc limit 1;
        ```

2.  total requests per status code (Ex: count of requests returning 404/ 401/502/504/500/200/)

    ```sql
    select statusCode, count(statusCode) as times from ngnix_access_log group by statusCode order by times;
    ```

3.  Top requests
    1.  top 5 requests by upstream_ip

        ```sql
        select LEFT(upstream_ip_port,LOCATE(':',upstream_ip_port)-1) as upstream_ip , count(LEFT(upstream_ip_port,LOCATE(':',upstream_ip_port)-1)) as times from ngnix_access_log group by upstream_ip order by times desc limit 5;
        ```

    2.  top 5 requests by host

        ```sql
        select host as hostt , count(host) as times from ngnix_access_log group by hostt order by times desc limit 5;
        ```

    3.  top 5 requests by bodyBytesSent

        ```sql
        select bodyBytesSent as bytes , count(bodyBytesSent) as times from ngnix_access_log group by bytes order by times desc limit 5;
        ```

    4.  top 5 requests by path (upto 2 subdirectories ex: /check/balance)

        ```sql  
        select LEFT(path,LOCATE('/',path, 2)+LOCATE('/',path, 3)-1) as pathh , count(LEFT(path,LOCATE('/',path, 2)+LOCATE('/',path, 3)-1)) as times from ngnix_access_log group by pathh order by times desc limit 5;
        ```

    5.  top 5 requests with the highest response time

        ```sql
        select * from ngnix_access_log order by responseTime desc limit 5;
        ```

    6.  get top 5 requests returning 200/5xx/4xx per host

        ```sql
        select host, count(host) as times from ngnix_access_log where statusCode LIKE '5%' or statusCode = '200' or statusCode LIKE '6%' group by host order by times desc limit 5;
        ```

4.  find the time last 200/5xx/4xx was received for a particular host

    ```sql
    select host, right(left(time,locate(' ', time)), locate(':', left(time,locate(' ', time)), 3)-3) as last_time, statusCode from ngnix_access_log where statusCode LIKE '5%' or statusCode = '200' or statusCode LIKE '6%' group by host order by time desc limit 5;
    ```
5.  get all request for the last 10 minutes

    ```sql
    select 
    host, 
    ip, 
    time
    from ngnix_access_log
    where
    str_to_date(left(left(time,locate(' ', time)), locate(':', left(time,locate(' ', time)), 3)-1),'%d/%b/%Y') 
    =
    (select str_to_date(left(left(time,locate(' ', time)), locate(':', left(time,locate(' ', time)), 3)-1),'%d/%b/%Y') as date from ngnix_access_log order by date desc, str_to_date(right(left(time,locate(' ', time)), locate(':', left(time,locate(' ', time)), 3)-3),'%H:%i:%s') desc limit 1)
    and
    str_to_date(right(left(time,locate(' ', time)), locate(':', left(time,locate(' ', time)), 3)-3),'%H:%i:%s')
    >=
    (select str_to_date(right(left(time,locate(' ', time)), locate(':', left(time,locate(' ', time)), 3)-3),'%H:%i:%s') as tiime from ngnix_access_log order by str_to_date(left(left(time,locate(' ', time)), locate(':', left(time,locate(' ', time)), 3)-1),'%d/%b/%Y') desc, tiime desc limit 1)  - interval 10 minute
    limit 10;
    ```

6.  get all the requests taking more than 2/5/10 secs to respond.
    1.  more than 2 seconds :

        ```sql
        select host, ip, responseTime from ngnix_access_log where responseTime>2 group by responseTime order by responseTime limit 10;
        ```

    2.  more than 5 seconds :

        ```sql
        select host, ip, responseTime from ngnix_access_log where responseTime>5 group by responseTime order by responseTime limit 10;
        ```

    3.  more than 10 seconds :

        ```sql
        select host, ip, responseTime from ngnix_access_log where responseTime>10 group by responseTime order by responseTime limit 10;
        ```

7.  get all the requests in the specified timestamp. `timestamp considered : between 06/Mar/2021:04:48 to 06/Mar/2021:07:38`

    ```sql
    select 
    host, 
    ip, 
    time
    from ngnix_access_log
    where
    (
        str_to_date(left(left(time,locate(' ', time)), locate(':', left(time,locate(' ', time)), 3)-1),'%d/%b/%Y')
        >=
        str_to_date(left(left('06/Mar/2021:07:28:00 ',locate(' ', '06/Mar/2021:07:28:00 ')), locate(':', left('06/Mar/2021:07:28:00 ',locate(' ', '06/Mar/2021:07:28:00 ')), 3)-1),'%d/%b/%Y')
        and
        str_to_date(right(left(time,locate(' ', time)), locate(':', left(time,locate(' ', time)), 3)-3),'%H:%i:%s')
        >=
        str_to_date(right(left('06/Mar/2021:07:28:00 ',locate(' ', '06/Mar/2021:07:28:00 ')), locate(':', left('06/Mar/2021:07:28:00 ',locate(' ', '06/Mar/2021:07:28:00 ')), 3)-3),'%H:%i:%s')
    )
    and
    (
        str_to_date(left(left(time,locate(' ', time)), locate(':', left(time,locate(' ', time)), 3)-1),'%d/%b/%Y')
        <=
        str_to_date(left(left('06/Mar/2021:07:38:00 ',locate(' ', '06/Mar/2021:07:38:00 ')), locate(':', left('06/Mar/2021:07:38:00 ',locate(' ', '06/Mar/2021:07:38:00 ')), 3)-1),'%d/%b/%Y')
        and
        str_to_date(right(left(time,locate(' ', time)), locate(':', left(time,locate(' ', time)), 3)-3),'%H:%i:%s')
        <=
        str_to_date(right(left('06/Mar/2021:07:38:00 ',locate(' ', '06/Mar/2021:07:38:00 ')), locate(':', left('06/Mar/2021:07:38:00 ',locate(' ', '06/Mar/2021:07:38:00 ')), 3)-3),'%H:%i:%s')
    );
    ```





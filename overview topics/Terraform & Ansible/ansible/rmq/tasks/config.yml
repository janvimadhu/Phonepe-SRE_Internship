---

# - name: updating rabbitmq erlang cookie
#   template:
#     src: var/lib/rabbitmq/erlang.cookie.j2
#     dest: /var/lib/rabbitmq/.erlang.cookie
#     owner: rabbitmq
#     group: rabbitmq
#     mode: 0400

# - name: Check if the erlang cookie exists
#   stat:
#     path: var/lib/rabbitmq/erlang.cookie
#     get_checksum: yes
#   register: cookie_exist

# - name: Show the name of master nodeprint
#   debug:
#     msg: "{{ cookie_exist.stat }} {{ cookie_exist.stat }} "

# - name: ensure nginx service is stopped{{ cookie_exist.stat.exists }}
#   service:
#     name: rabbitmq-server
#     state: stopped
#   when: not cookie_exist.stat.exists


# - name: Show the name of master nodeprint
#   debug:
#     msg: "{{ play_hosts }}"
#   run_once: true
# - name: Block to copy erlang cookie / update .config and restart for new nodes
#   block:
    # - name: backup old erlang cookie
    #   shell: cp -a /var/lib/rabbitmq/.erlang.cookie /var/lib/rabbitmq/.erlang.cookie.old
    #   changed_when: false

- name: updating rabbitmq erlang cookie
  template:
    src: var/lib/rabbitmq/erlang.cookie.j2
    dest: /var/lib/rabbitmq/.erlang.cookie
    owner: rabbitmq
    group: rabbitmq
    mode: 0400
  notify:
    restart rabbitmq-server

- include_tasks: tls.yml
  when: enable_tls

- name: Change owner of /var/lib/rabbitmq
  become: yes
  file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
    owner: "rabbitmq"
    group: "rabbitmq"
  with_items:
    - /var/lib/rabbitmq

- name: rabbitmq config file
  template:
    src: "etc/rabbitmq/rabbitmq.config.j2"
    dest: "/etc/rabbitmq/rabbitmq.config"
    owner: rabbitmq
    group: rabbitmq
    mode: 0644

- meta: flush_handlers

    # - name: remove old erlang cookie
    #   file:
    #     path: /var/lib/rabbitmq/.erlang.cookie.old
    #     state: absent
    #   changed_when: false
#  when: rabbitmq_create_cluster



# - name: Change owner of /var/lib/rabbitmq
#   become: yes
#   file:
#     path: "{{ item }}"
#     state: directory
#     mode: "0755"
#     owner: "rabbitmq"
#     group: "rabbitmq"
#   with_items:
#     - /var/lib/rabbitmq

# - name: Check RabbitMQ is running in cluster mode
#   command: rabbitmqctl cluster_status --formatter json
#   delegate_to: "{{ groups[nodes][0] }}"
#   run_once: true
#   changed_when: false
#   register: rabbitmq_cluster_status

# - name: Set rabbitmq_cluster_running_nodes fact
#   set_fact:
#     rabbitmq_cluster_status: "{{ rabbitmq_cluster_status.stdout | from_json }}"
#   run_once: true

# - name: rabbitmq config file
#   template:
#     src: "etc/rabbitmq/rabbitmq.config.j2"
#     dest: "/etc/rabbitmq/rabbitmq.config"
#     owner: rabbitmq
#     group: rabbitmq
#     mode: 0644
# #  notify:
# #    restart rabbitmq-server

# - name: Restart new nodes for config changes 
#   service:
#     name: rabbitmq-server
#     state: restarted
#   vars:
#     rabbitmq_node: "rabbit@{{ ansible_nodename }}"
#   when:
#     - (rabbitmq_node not in rabbitmq_cluster_status['running_nodes'])

# #- meta: flush_handlers
---
# # to make it work with env variables do: 
# # export VAULT_TOKEN=<token>
# # export VAULT_ADDR=http://domain:8200

# - name: Pull certs from vault and push to remote
#   ansible.builtin.set_fact:
#     my_secrets: "{{ lookup('community.hashi_vault.hashi_vault', 'kv/data/as-certs', auth_method='token') }}"
# - copy: content="{{ item.value }}" dest=/etc/aerospike/vault/{{ item.key }}
#   loop: "{{ my_secrets | dict2items }}"

- name: Create aerospike log directory 
  file:
    path: /var/log/aerospike
    state: directory
    mode: "0755"

- name: Create aerospike xdr log directory
  file:
    path: "{{xdr_log_directory}}"
    state: directory
    mode: 0755

- name: Copy configuration
  template:
    src: "{{ aerospike_conf_file }}.j2"
    dest: "/{{ aerospike_conf_file }}"
    mode: "0644"
    owner: root
    group: root

# - block:
#     - name: Check whether encryption key exists already
#       stat:
#         path: "{{ encryption_key_file_path }}"
#       register: stat_encryption_key_file_path

#     - block:
#         - name: "Add key to key file {{ encryption_key_file_path }}"
#           shell: "head --bytes 256 /dev/urandom > {{ encryption_key_file_path }}"
#           become: yes
#           when: not stat_encryption_key_file_path.stat.exists

#         - name: "Secure key file {{ encryption_key_file_path }}"
#           file:
#             path: "{{ encryption_key_file_path }}"
#             owner: root
#             group: root
#             mode: 0400
#           become: yes
#   when: encryption_at_rest

# Extra i put for certs
# - name: Copy Certs
#   copy:
#     src: "{{ aerospike_cert_file }}/{{ item }}"
#     dest: "/{{ aerospike_conf_file }}"
#     mode: "0644"
#     owner: root
#     group: root
#     with_items:
#         - ca.crt
#         - server.crt

- block:
    - name: Make sure certificates directories exist
      file:
        path: "{{ certificates_directory }}"
        state: directory
        owner: root
        group: root
        mode: 0555

    # - name: Copy certificates across
    #   copy:
    #     src: "certificates/{{ item }}"
    #     dest: "{{ certificates_directory }}"
    #     owner: root
    #     group: root
    #     mode: 0444
    #     decrypt: true
    #   with_items:
    #     - ca.crt
    #     - server.crt

    # - name: Copy private key across
    #   copy:
    #     src: "certificates/{{ item }}"
    #     dest: "{{ certificates_directory }}"
    #     owner: root
    #     group: root
    #     mode: 0400
    #     decrypt: true
    #   with_items:
    #     - server.key
    
    # to make it work with env variables do: 
    # export VAULT_TOKEN=<token>
    # export VAULT_ADDR=http://domain:8200

    - name: Pull certs and keys from vault and push to remote
      ansible.builtin.set_fact:
        my_secrets: "{{ lookup('community.hashi_vault.hashi_vault', 'kv/data/as-certs', auth_method='token') }}"
    - copy: content="{{ item.value }}" dest={{ certificates_directory }}/{{ item.key }}
      loop: "{{ my_secrets | dict2items }}"
      no_log: True
  when: tls_enabled

- name: Feature key
  copy:
    src: "{{ default_feature_key_path }}"
    dest: /etc/aerospike/features.conf
    owner: root
    group: root
    mode: '0644'   

- name: Create directory /var/local
  file:
    path: /var/local
    state: directory
    mode: "0755"

- name: Configure log rotation
  copy:
    src: "etc/logrotate.d/logrotate_aerospike"
    dest: "/etc/logrotate.d/aerospike"
    owner: root
    group: root
    mode: 0755
#   notify: start aerospike

# - meta: flush_handlers

- name: Copy /etc/aerospike/astools.conf
  copy:
    src: "etc/aerospike/astools.conf"
    dest: "/etc/aerospike/astools.conf"
    owner: root
    group: root
    mode: 0755
  when: tls_enabled

- name: Check node status
  shell: sudo asadm -e 'info network' -Uadmin -P admin | awk '{ print $2 }'
  register: cluster_health

- debug: msg="{{ cluster_health.stdout }}"

- name: restart aerospike if node not in cluster
  throttle: 1
  service: name=aerospike state=restarted
  when: 'ansible_hostname not in cluster_health.stdout'

- name: restart amc if node not in cluster
  throttle: 1
  service: name=amc state=restarted
  when: 'ansible_hostname not in cluster_health.stdout'

- name: Start service aerospike, if not started
  service:
    name: aerospike
    state: started

- name: Start service amc, if not started
  service:
    name: amc
    state: started
